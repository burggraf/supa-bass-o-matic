name: "publish-ubuntu-x86"

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set environment variables
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "IDENTIFIER=$(node -p "require('./package.json').identifier")" >> $GITHUB_ENV    
          echo "DESCRIPTION=$(node -p "require('./package.json').description")" >> $GITHUB_ENV

      - name: Check environment variables
        run: |
          echo "ENV VERSION: ${{ env.VERSION }}"
          echo "ENV NAME: ${{ env.NAME }}"
          echo "ENV IDENTIFIER: ${{ env.IDENTIFIER }}"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install npm dependencies
        run: npm install

      - name: Build web assets
        run: npm run build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ env.NAME }}-${{ env.VERSION }}
          releaseName: "${{ env.NAME }} ${{ env.VERSION }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
          distPath: ./build
          bundleIdentifier: ${{ env.IDENTIFIER }}
          appName: "${{ env.NAME }}"
          appVersion: "${{ env.VERSION }}"
          artifactName: "${{ env.NAME }}-${{ env.VERSION }}-ubuntu-x64"
          artifactPaths: |
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.AppImage

      - name: Locate and rename artifact
        run: |
          find src-tauri/target -name "*.deb" -exec mv {} ${{ env.NAME }}-${{ env.VERSION }}-ubuntu-x64.deb \;

      - name: Wait for release and retry
        uses: actions/github-script@v6
        with:
          script: |
            const maxAttempts = 10;
            const delaySeconds = 30;
            
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              try {
                const release = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: `v${process.env.VERSION}`
                });
                console.log(`Found release on attempt ${attempt}`);
                break;
              } catch (error) {
                if (attempt === maxAttempts) {
                  console.log('Max attempts reached, failing');
                  throw error;
                }
                console.log(`Attempt ${attempt} failed, waiting ${delaySeconds} seconds...`);
                await new Promise(r => setTimeout(r, delaySeconds * 1000));
              }
            }

      - name: Get Release
        id: get_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./${{ env.NAME }}-${{ env.VERSION }}-ubuntu-x64.deb
          asset_name: ${{ env.NAME }}-${{ env.VERSION }}-ubuntu-x64.deb
          asset_content_type: application/vnd.debian.binary-package
