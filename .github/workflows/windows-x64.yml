name: "publish-windows-x86"

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set environment variables
        run: |
          "VERSION=$(node -p "require('./package.json').version")" >> $env:GITHUB_ENV
          "NAME=$(node -p "require('./package.json').name")" >> $env:GITHUB_ENV
          "IDENTIFIER=$(node -p "require('./package.json').identifier")" >> $env:GITHUB_ENV    
          "DESCRIPTION=$(node -p "require('./package.json').description")" >> $env:GITHUB_ENV
  
      - name: Check environment variables
        run: |
          echo "ENV VERSION: ${{ env.VERSION }}"
          echo "ENV NAME: ${{ env.NAME }}"
          echo "ENV IDENTIFIER: ${{ env.IDENTIFIER }}"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # This target is only used on macOS runners.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install ImageMagick
        run: choco install imagemagick.app -y

      - name: Install npm dependencies
        run: npm install

      - name: Build web assets
        run: npm run build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ env.NAME }}-${{ env.VERSION }}
          releaseName: "${{ env.NAME }} ${{ env.VERSION }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          distPath: ./build
          bundleIdentifier: com.supabasecommunity.supabassomatic
          appName: "${{ env.NAME }}"
          appVersion: "${{ env.VERSION }}"
          artifactName: "${{ env.NAME }}-${{ env.VERSION }}-windows-x64"
          artifactPaths: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe

      - name: Locate bundle files
        shell: pwsh
        run: |
          Write-Host "Looking for bundle files..."
          Get-ChildItem -Path src-tauri -Recurse -Include *.msi,*.exe | ForEach-Object {
            Write-Host $_.FullName
          }

      - name: Rename bundle files
        shell: pwsh
        run: |
          Get-ChildItem -Path src-tauri -Recurse -Filter "*.msi" | ForEach-Object {
            $newName = "${{ env.NAME }}-${{ env.VERSION }}-windows-x64.msi"
            Move-Item $_.FullName (Join-Path $_.Directory.FullName $newName) -Force
          }
          Get-ChildItem -Path src-tauri -Recurse -Filter "*setup.exe" | ForEach-Object {
            $newName = "${{ env.NAME }}-${{ env.VERSION }}-windows-x64.exe"
            Move-Item $_.FullName (Join-Path $_.Directory.FullName $newName) -Force
          }

